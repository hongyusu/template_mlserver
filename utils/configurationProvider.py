# -*- coding: utf-8 -*-
# ------------------------------------------------+
#                                                 |
# VCA : util service                              |
#                                                 |
# ------------------------------------------------+
import configparser
import os
config = configparser.ConfigParser()

__location__ = os.path.realpath(
        os.path.join(os.getcwd(), os.path.dirname(__file__)))

default_path = os.path.join(__location__, 'configs/config.ini')

CONFIG_FILE = os.environ.get('CONFIG_FILE', default_path)

config.read(CONFIG_FILE)


def get_configs():
    """
    This function provides external service URLs in a dictionary. It reads env first, if none, configuration in configs/config_bin.ini is used
    :return: dictionary of configurations of external service URLs.
    """
    # DJANGO_ENV can be set to DEFAULT, LOCAL or DOCKER now

    currentenvironment = os.environ.get('DJANGO_ENV','DEFAULT')
    params = config[currentenvironment.upper()]

    AI_SERVER_URL        = os.environ.get('AI_SERVER_URL',params.get('AI_SERVER_URL'))
    SENTIMENT_SERVER_URL = os.environ.get('SENTIMENT_SERVER_URL',params.get('SENTIMENT_SERVER_URL'))
    DIALOGUE_SERVER_URL  = os.environ.get('DIALOGUE_SERVER_URL',params.get('DIALOGUE_SERVER_URL'))
    NLP_SERVER_URL       = os.environ.get('NLP_SERVER_URL',params.get('NLP_SERVER_URL'))
    EMBEDDING_SERVER_URL = os.environ.get('EMBEDDING_SERVER_URL', params.get('EMBEDDING_SERVER_URL'))
    RETRIEVAL_SERVER_URL = os.environ.get('RETRIEVAL_SERVER_URL', params.get('RETRIEVAL_SERVER_URL'))
    INTENT_SERVER_URL    = os.environ.get('INTENT_SERVER_URL', params.get('INTENT_SERVER_URL'))
    ACTION_SERVER_URL    = os.environ.get('ACTION_SERVER_URL',  params.get('ACTION_SERVER_URL'))
    REDIS_SERVER_IP      = os.environ.get('REDIS_SERVER_URL',  params.get('REDIS_SERVER_IP'))


    # BOTSERVER
    BOTSERVER_BAF_FILE               = os.environ.get('BOTSERVER_BAF_FILE',  params.get('BOTSERVER_BAF_FILE'))
    BOTSERVER_NORDIC_CITY            = os.environ.get('BOTSERVER_NORDIC_CITY',  params.get('BOTSERVER_NORDIC_CITY'))
    BOTSERVER_CURRENTY               = os.environ.get('BOTSERVER_CURRENTY',  params.get('BOTSERVER_CURRENTY'))
    BOTSERVER_INTENT_THRESHOLD       = os.environ.get('BOTSERVER_INTENT_THRESHOLD',  params.get('BOTSERVER_INTENT_THRESHOLD'))
    BOTSERVER_ALTERNATIVES_THRESHOLD = os.environ.get('BOTSERVER_ALTERNATIVES_THRESHOLD',  params.get('BOTSERVER_ALTERNATIVES_THRESHOLD'))
    BOTSERVER_RETRIEVAL_THRESHOLD    = os.environ.get('BOTSERVER_RETRIEVAL_THRESHOLD',  params.get('BOTSERVER_RETRIEVAL_THRESHOLD'))
    BOTSERVER_CLEANSING_INTERVAL_SEC = os.environ.get('BOTSERVER_CLEANSING_INTERVAL_SEC',  params.get('BOTSERVER_CLEANSING_INTERVAL_SEC'))
    BOTSERVER_DEFAUTL_CHANNEL        = os.environ.get('BOTSERVER_DEFAUTL_CHANNEL',  params.get('BOTSERVER_DEFAUTL_CHANNEL'))
    BOTSERVER_LANGUAGES              = os.environ.get('BOTSERVER_LANGUAGES',  params.get('BOTSERVER_LANGUAGES'))
    BOTSERVER_LANGUAGE_MAPPINGS      = os.environ.get('BOTSERVER_LANGUAGE_MAPPINGS',  params.get('BOTSERVER_LANGUAGE_MAPPINGS'))
    BOTSERVER_CLIENT_CONNECT_TIMEOUT = os.environ.get('BOTSERVER_CLIENT_CONNECT_TIMEOUT',  params.get('BOTSERVER_CLIENT_CONNECT_TIMEOUT'))
    BOTSERVER_CLIENT_READ_TIMEOUT    = os.environ.get('BOTSERVER_CLIENT_READ_TIMEOUT',  params.get('BOTSERVER_CLIENT_READ_TIMEOUT'))
    BOTSERVER_ORIGINATOR_CHANNEL_MAPPINGS = os.environ.get('BOTSERVER_ORIGINATOR_CHANNEL_MAPPINGS', params.get('BOTSERVER_ORIGINATOR_CHANNEL_MAPPINGS'))


    # NER
    NER_NORDEA_NAMES = os.environ.get('NER_NORDEA_NAMES',  params.get('NER_NORDEA_NAMES'))
    NER_MODEL_DIR = os.environ.get('NER_MODEL_DIR', params.get('NER_MODEL_DIR'))
    NER_MASKING_DIR = os.environ.get('NER_MASKING_DIR', params.get('NER_MASKING_DIR'))

    # SENTIMENT
    SENTIMENT_DATA_POS_ENG    = os.environ.get('SENTIMENT_DATA_POS_ENG',  params.get('SENTIMENT_DATA_POS_ENG'))
    SENTIMENT_DATA_NEG_ENG    = os.environ.get('SENTIMENT_DATA_NEG_ENG',  params.get('SENTIMENT_DATA_NEG_ENG'))
    SENTIMENT_DATA_POS_FIN    = os.environ.get('SENTIMENT_DATA_POS_FIN',  params.get('SENTIMENT_DATA_POS_FIN'))
    SENTIMENT_DATA_NEG_FIN    = os.environ.get('SENTIMENT_DATA_NEG_FIN',  params.get('SENTIMENT_DATA_NEG_FIN'))
    SENTIMENT_EMBEDDING_DIM   = os.environ.get('SENTIMENT_EMBEDDING_DIM',  params.get('SENTIMENT_EMBEDDING_DIM'))
    SENTIMENT_NUM_FILTERS     = os.environ.get('SENTIMENT_NUM_FILTERS',  params.get('SENTIMENT_NUM_FILTERS'))
    SENTIMENT_FILTER_SIZES    = os.environ.get('SENTIMENT_FILTER_SIZES',  params.get('SENTIMENT_FILTER_SIZES'))
    SENTIMENT_RUN_NAME        = os.environ.get('SENTIMENT_RUN_NAME',  params.get('SENTIMENT_RUN_NAME'))
    SENTIMENT_CHECKPOINT_FILE = os.environ.get('SENTIMENT_CHECKPOINT_FILE',  params.get('SENTIMENT_CHECKPOINT_FILE'))
    SENTIMENT_RUN_NAME_FIN    = os.environ.get('SENTIMENT_RUN_NAME_FIN',  params.get('SENTIMENT_RUN_NAME_FIN'))

    # INTENT
    INTENT_ITERATION        = os.environ.get('INTENT_ITERATION',  params.get('INTENT_ITERATION'))
    INTENT_EVALUATION_EVERY = os.environ.get('INTENT_EVALUATION_EVERY',  params.get('INTENT_EVALUATION_EVERY'))
    INTENT_CHECKPOINT_EVERY = os.environ.get('INTENT_CHECKPOINT_EVERY',  params.get('INTENT_CHECKPOINT_EVERY'))
    INTENT_EMBEDDING_DIM    = os.environ.get('INTENT_EMBEDDING_DIM',  params.get('INTENT_EMBEDDING_DIM'))
    INTENT_NUM_FILTERS      = os.environ.get('INTENT_NUM_FILTERS',  params.get('INTENT_NUM_FILTERS'))
    INTENT_FILTER_SIZES     = os.environ.get('INTENT_FILTER_SIZES',  params.get('INTENT_FILTER_SIZES'))
    INTENT_CHECKPOINT_FILE  = os.environ.get('INTENT_CHECKPOINT_FILE',  params.get('INTENT_CHECKPOINT_FILE'))
    INTENT_RUN_NAME_FI_EN   = os.environ.get('INTENT_RUN_NAME_FI_EN',  params.get('INTENT_RUN_NAME_FI_EN'))
    INTENT_RUN_NAME_FI_FI   = os.environ.get('INTENT_RUN_NAME_FI_FI',  params.get('INTENT_RUN_NAME_FI_FI'))
    INTENT_RUN_NAME_SE_SE   = os.environ.get('INTENT_RUN_NAME_SE_SE',  params.get('INTENT_RUN_NAME_SE_SE'))
    INTENT_RUN_NAME_DK_DK   = os.environ.get('INTENT_RUN_NAME_DK_DK',  params.get('INTENT_RUN_NAME_DK_DK'))
    INTENT_RUN_NAME_NO_NO   = os.environ.get('INTENT_RUN_NAME_NO_NO',  params.get('INTENT_RUN_NAME_NO_NO'))
    INTENT_RUN_NAME_BB_FI_FI  = os.environ.get('INTENT_RUN_NAME_BB_FI_FI',  params.get('INTENT_RUN_NAME_BB_FI_FI'))
    INTENT_RUN_NAME_BB_SE_SE  = os.environ.get('INTENT_RUN_NAME_BB_SE_SE',  params.get('INTENT_RUN_NAME_BB_SE_SE'))
    INTENT_RUN_NAME_BB_DK_DK  = os.environ.get('INTENT_RUN_NAME_BB_DK_DK',  params.get('INTENT_RUN_NAME_BB_DK_DK'))
    INTENT_RUN_NAME_BB_NO_NO  = os.environ.get('INTENT_RUN_NAME_BB_NO_NO',  params.get('INTENT_RUN_NAME_BB_NO_NO'))

    # TT
    REDIS_BACKEND_URL           = os.environ.get('REDIS_BACKEND_URL',  params.get('REDIS_BACKEND_URL'))
    TA_REDIS_BACKEND_URL           = os.environ.get('TA_REDIS_BACKEND_URL',  params.get('TA_REDIS_BACKEND_URL'))

    TT_BACKEND_URL              = os.environ.get('TT_BACKEND_URL',  params.get('TT_BACKEND_URL'))
    UPDATE_BOT_SERVER_URL       = os.environ.get('UPDATE_BOT_SERVER_URL',  params.get('UPDATE_BOT_SERVER_URL'))
    UPDATE_INTENT_SERVER_URL    = os.environ.get('UPDATE_INTENT_SERVER_URL',  params.get('UPDATE_INTENT_SERVER_URL'))
    UPDATE_RETRIEVAL_SERVER_URL = os.environ.get('UPDATE_RETRIEVAL_SERVER_URL',  params.get('UPDATE_RETRIEVAL_SERVER_URL'))

    VCA_PROD_SERVER_URL         = os.environ.get('VCA_PROD_SERVER_URL',  params.get('VCA_PROD_SERVER_URL'))
    VCA_DEMO_SERVER_URL         = os.environ.get('VCA_DEMO_SERVER_URL', params.get('VCA_DEMO_SERVER_URL'))
    VCA_SERVER_USER             = os.environ.get('VCA_SERVER_USER',  params.get('VCA_SERVER_USER'))
    VCA_SERVER_PASS             = os.environ.get('VCA_SERVER_PASS',  params.get('VCA_SERVER_PASS'))
    JOURNEY_UPLOAD_URL_SUFFIX   = os.environ.get('JOURNEY_UPLOAD_URL_SUFFIX', params.get('JOURNEY_UPLOAD_URL_SUFFIX'))
    INTENT_UPDATE_URL_SUFFIX    = os.environ.get('INTENT_UPDATE_URL_SUFFIX', params.get('INTENT_UPDATE_URL_SUFFIX'))
    INTENT_RELOAD_URL_SUFFIX    = os.environ.get('INTENT_RELOAD_URL_SUFFIX', params.get('INTENT_RELOAD_URL_SUFFIX'))
    FILE_UPLOAD_URL_SUFFIX      = os.environ.get('FILE_UPLOAD_URL_SUFFIX', params.get('FILE_UPLOAD_URL_SUFFIX'))
    RETRIEVAL_RELOAD_URL_SUFFIX = os.environ.get('RETRIEVAL_RELOAD_URL_SUFFIX', params.get('RETRIEVAL_RELOAD_URL_SUFFIX'))
    WRAPPER_RELOAD_URL_SUFFIX   = os.environ.get('WRAPPER_RELOAD_URL_SUFFIX', params.get('WRAPPER_RELOAD_URL_SUFFIX'))
    KEYWORD_MATCH_URL_SUFFIX   = os.environ.get('KEYWORD_MATCH_URL_SUFFIX', params.get('KEYWORD_MATCH_URL_SUFFIX'))

    # BOTSERVER
    RELA_PATH              = os.environ.get('RELA_PATH',  params.get('RELA_PATH'))


    # ACTION SERVER
    ACTION_AUTHENTICATION_SERVICE   = os.environ.get('ACTION_AUTHENTICATION_SERVICE', params.get('ACTION_AUTHENTICATION_SERVICE'))
    ACTION_AUTH_REFRESH_SERVICE     = os.environ.get('ACTION_AUTH_REFRESH_SERVICE', params.get('ACTION_AUTH_REFRESH_SERVICE'))
    ACTION_MOCK_AUTHENTICATION_SERVICE = os.environ.get('ACTION_MOCK_AUTHENTICATION_SERVICE', params.get('ACTION_MOCK_AUTHENTICATION_SERVICE'))
    ACTION_PAYMENT_SERVICE          = os.environ.get('ACTION_PAYMENT_SERVICE', params.get('ACTION_PAYMENT_SERVICE'))
    ACTION_ACCOUNT_SERVICE          = os.environ.get('ACTION_ACCOUNT_SERVICE', params.get('ACTION_ACCOUNT_SERVICE'))
    ACTION_MEETING_SERVICE          = os.environ.get('ACTION_MEETING_SERVICE', params.get('ACTION_MEETING_SERVICE'))
    ACTION_CARD_SERVICE             = os.environ.get('ACTION_CARD_SERVICE', params.get('ACTION_CARD_SERVICE'))
    ACTION_CUSTOMER_INFO_SERVICE = os.environ.get('ACTION_CUSTOMER_INFO_SERVICE', params.get('ACTION_CUSTOMER_INFO_SERVICE'))
    ACTION_CLIENT_ID                = os.environ.get('ACTION_CLIENT_ID', params.get('ACTION_CLIENT_ID'))
    ACTION_MEMORY_CLEAN_INTERVAL = os.environ.get('ACTION_MEMORY_CLEAN_INTERVAL', params.get('ACTION_MEMORY_CLEAN_INTERVAL'))
    ACTION_SUBJECT_TOKEN_LIFETIME = os.environ.get('ACTION_SUBJECT_TOKEN_LIFETIME', params.get('ACTION_SUBJECT_TOKEN_LIFETIME'))
    ACTION_SERVER_CERTIFICATE_PATH = os.environ.get('ACTION_SERVER_CERTIFICATE_PATH', params.get('ACTION_SERVER_CERTIFICATE_PATH'))
    ACTION_SERVER_KAFKA_CERT_PATH = os.environ.get('ACTION_SERVER_KAFKA_CERT_PATH', params.get('ACTION_SERVER_KAFKA_CERT_PATH'))
    ACTION_SERVER_KAFKA_KEY_PATH = os.environ.get('ACTION_SERVER_KAFKA_KEY_PATH', params.get('ACTION_SERVER_KAFKA_KEY_PATH'))
    ACTION_SERVER_COMMUNICATIONS_LAYER_BASE_URL = os.environ.get('ACTION_SERVER_COMMUNICATIONS_LAYER_BASE_URL', params.get('ACTION_SERVER_COMMUNICATIONS_LAYER_BASE_URL'))
    ACTION_SERVER_COMMUNICATIONS_LAYER_TOPIC = os.environ.get('ACTION_SERVER_COMMUNICATIONS_LAYER_TOPIC', params.get('ACTION_SERVER_COMMUNICATIONS_LAYER_TOPIC'))
    ACTION_SERVER_KAFKA_CERTS = os.environ.get('ACTION_SERVER_KAFKA_CERTS', params.get('ACTION_SERVER_KAFKA_CERTS'))

    ACTION_NDF_ENVIRONMENT = os.environ.get('ACTION_NDF_ENVIRONMENT', params.get('ACTION_NDF_ENVIRONMENT'))
    ACTION_SERVER_CONNECT_TIMEOUT = os.environ.get('ACTION_SERVER_CONNECT_TIMEOUT', params.get('ACTION_SERVER_CONNECT_TIMEOUT'))
    ACTION_SERVER_READ_TIMEOUT = os.environ.get('ACTION_SERVER_READ_TIMEOUT', params.get('ACTION_SERVER_READ_TIMEOUT'))
    ACTION_TOKEN_EXPIRES_AT_REDUCTION = os.environ.get('ACTION_TOKEN_EXPIRES_AT_REDUCTION', params.get('ACTION_TOKEN_EXPIRES_AT_REDUCTION'))

    OPERATION_SERVICE_USER = os.environ.get('OPERATION_SERVICE_USER', params.get('OPERATION_SERVICE_USER'))
    OPERATION_SERVICE_PASSWORD = os.environ.get('OPERATION_SERVICE_PASSWORD', params.get('OPERATION_SERVICE_PASSWORD'))
    OPERATION_REMOTE_NAME = os.environ.get('OPERATION_REMOTE_NAME', params.get('OPERATION_REMOTE_NAME'))
    OPERATION_SAMBA_IP = os.environ.get('OPERATION_SAMBA_IP', params.get('OPERATION_SAMBA_IP'))
    OPERATION_SAMBA_PORT = os.environ.get('OPERATION_SAMBA_PORT', params.get('OPERATION_SAMBA_PORT'))
    OPERATION_SAMBA_SHARE = os.environ.get('OPERATION_SAMBA_SHARE', params.get('OPERATION_SAMBA_SHARE'))
    ARCHIVE_DIR = os.environ.get('ARCHIVE_DIR', params.get('ARCHIVE_DIR'))
    ARCHIVE_LIFETIME_DAYS = os.environ.get('ARCHIVE_LIFETIME_DAYS', params.get('ARCHIVE_LIFETIME_DAYS'))
    MYSQL_HOST_URL = os.environ.get('MYSQL_HOST_URL', params.get('MYSQL_HOST_URL'))

    # NLG
    NLG_SIZE            = os.environ.get('NLG_SIZE',  params.get('NLG_SIZE'))
    NLG_NUM_LAYERS      = os.environ.get('NLG_NUM_LAYERS',  params.get('NLG_NUM_LAYERS'))
    NLG_VOCAB_SIZE      = os.environ.get('NLG_VOCAB_SIZE',  params.get('NLG_VOCAB_SIZE'))
    NLG_DATA_DIR        = os.environ.get('NLG_DATA_DIR',  params.get('NLG_DATA_DIR'))
    NLG_TRAIN_DIR       = os.environ.get('NLG_TRAIN_DIR',  params.get('NLG_TRAIN_DIR'))
    NLG_FROM_TRAIN_DATA = os.environ.get('NLG_FROM_TRAIN_DATA',  params.get('NLG_FROM_TRAIN_DATA'))
    NLG_TO_TRAIN_DATA   = os.environ.get('NLG_TO_TRAIN_DATA',  params.get('NLG_TO_TRAIN_DATA'))
    NLG_FROM_DEV_DATA   = os.environ.get('NLG_FROM_DEV_DATA',  params.get('NLG_FROM_DEV_DATA'))
    NLG_TO_DEV_DATA     = os.environ.get('NLG_TO_DEV_DATA',  params.get('NLG_TO_DEV_DATA'))

    # EMBEDDING
    EMBEDDING_FEATURE_SIZE = os.environ.get('EMBEDDING_FEATURE_SIZE',  params.get('EMBEDDING_FEATURE_SIZE'))
    EMBEDDING_WORD_SIZE    = os.environ.get('EMBEDDING_WORD_SIZE',     params.get('EMBEDDING_WORD_SIZE'))

    # NLP
    NLP_VOCAB_SIZE                    = os.environ.get('NLP_VOCAB_SIZE',           params.get('NLP_VOCAB_SIZE'))
    NLP_FREQUENT_VOCAB_SIZE           = os.environ.get('NLP_FREQUENT_VOCAB_SIZE',  params.get('NLP_FREQUENT_VOCAB_SIZE'))
    FREQUENT_VOCAB_ENGLISH            = os.environ.get('FREQUENT_VOCAB_ENGLISH',  params.get('FREQUENT_VOCAB_ENGLISH'))
    FREQUENT_VOCAB_FINNISH            = os.environ.get('FREQUENT_VOCAB_FINNISH',  params.get('FREQUENT_VOCAB_FINNISH'))
    FREQUENT_VOCAB_SWEDISH            = os.environ.get('FREQUENT_VOCAB_SWEDISH',  params.get('FREQUENT_VOCAB_SWEDISH'))
    FREQUENT_VOCAB_NORWEGIAN          = os.environ.get('FREQUENT_VOCAB_NORWEGIAN',  params.get('FREQUENT_VOCAB_NORWEGIAN'))
    FREQUENT_VOCAB_DANISH             = os.environ.get('FREQUENT_VOCAB_DANISH',  params.get('FREQUENT_VOCAB_DANISH'))
    LANGUAGE_DETECTION_TEST_QUESTIONS = os.environ.get('LANGUAGE_DETECTION_TEST_QUESTIONS',  params.get('LANGUAGE_DETECTION_TEST_QUESTIONS'))

    # REDIS
    REDIS_SERVER_MASTER_1_URL = os.environ.get('REDIS_SERVER_MASTER_1_URL', params.get('REDIS_SERVER_MASTER_1_URL'))
    REDIS_SERVER_MASTER_2_URL = os.environ.get('REDIS_SERVER_MASTER_2_URL', params.get('REDIS_SERVER_MASTER_2_URL'))
    REDIS_SERVER_MASTER_3_URL = os.environ.get('REDIS_SERVER_MASTER_3_URL', params.get('REDIS_SERVER_MASTER_3_URL'))

    # ROOT DIR
    VCA_DIR  = os.environ.get('VCA_DIR', params.get('VCA_DIR'))
    DATA_DIR = os.environ.get('DATA_DIR', params.get('DATA_DIR'))

    # This is the self generated intent question file in english
    NORDEA_PROCESS_ENGLISH         = os.environ.get('NORDEA_PROCESS_ENGLISH', params.get('NORDEA_PROCESS_ENGLISH'))
    NORDEA_PROCESS_ENGLISH_FEATURE = os.environ.get('NORDEA_PROCESS_ENGLISH_FEATURE', params.get('NORDEA_PROCESS_ENGLISH_FEATURE'))
    NORDEA_PROCESS_ENGLISH_WORDS   = os.environ.get('NORDEA_PROCESS_ENGLISH_WORDS', params.get('NORDEA_PROCESS_ENGLISH_WORDS'))

    # This is generated from the website FAQ in english
    NORDEA_FAQ_ENGLISH         = os.environ.get('NORDEA_FAQ_ENGLISH', params.get('NORDEA_FAQ_ENGLISH'))
    NORDEA_FAQ_ENGLISH_FEATURE = os.environ.get('NORDEA_FAQ_ENGLISH_FEATURE', params.get('NORDEA_FAQ_ENGLISH_FEATURE'))
    NORDEA_FAQ_ENGLISH_WORDS   = os.environ.get('NORDEA_FAQ_ENGLISH_WORDS', params.get('NORDEA_FAQ_ENGLISH_WORDS'))

    # This data has all the intent questions in english
    MVP_NORDEA_INTENT_FI_EN         = os.environ.get('MVP_NORDEA_INTENT_FI_EN', params.get('MVP_NORDEA_INTENT_FI_EN'))
    MVP_NORDEA_INTENT_FI_EN_FEATURE = os.environ.get('MVP_NORDEA_INTENT_FI_EN_FEATURE', params.get('MVP_NORDEA_INTENT_FI_EN_FEATURE'))
    MVP_NORDEA_INTENT_FI_EN_WORDS   = os.environ.get('MVP_NORDEA_INTENT_FI_EN_WORDS', params.get('MVP_NORDEA_INTENT_FI_EN_WORDS'))
    MVP_NORDEA_INTENT_FI_EN_LABEL   = os.environ.get('MVP_NORDEA_INTENT_FI_EN_LABEL', params.get('MVP_NORDEA_INTENT_FI_EN_LABEL'))

    # This is the keyword data in english
    MVP_NORDEA_INTENT_KEYWORD_FI_EN         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN'))
    MVP_NORDEA_INTENT_KEYWORD_FI_EN_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_FI_EN_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_FI_EN_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_EN_LABEL'))

    # This is the self generated intent question file in finnish
    NORDEA_PROCESS_FINNISH         = os.environ.get('NORDEA_PROCESS_FINNISH', params.get('NORDEA_PROCESS_FINNISH'))
    NORDEA_PROCESS_FINNISH_FEATURE = os.environ.get('NORDEA_PROCESS_FINNISH_FEATURE', params.get('NORDEA_PROCESS_FINNISH_FEATURE'))
    NORDEA_PROCESS_FINNISH_WORDS   = os.environ.get('NORDEA_PROCESS_FINNISH_WORDS', params.get('NORDEA_PROCESS_FINNISH_WORDS'))

    # This is generated from the website FAQ in finnish
    NORDEA_FAQ_FINNISH         = os.environ.get('NORDEA_FAQ_FINNISH', params.get('NORDEA_FAQ_FINNISH'))
    NORDEA_FAQ_FINNISH_FEATURE = os.environ.get('NORDEA_FAQ_FINNISH_FEATURE', params.get('NORDEA_FAQ_FINNISH_FEATURE'))
    NORDEA_FAQ_FINNISH_WORDS   = os.environ.get('NORDEA_FAQ_FINNISH_WORDS', params.get('NORDEA_FAQ_FINNISH_WORDS'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_FI_FI         = os.environ.get('MVP_NORDEA_INTENT_FI_FI', params.get('MVP_NORDEA_INTENT_FI_FI'))
    MVP_NORDEA_INTENT_FI_FI_FEATURE = os.environ.get('MVP_NORDEA_INTENT_FI_FI_FEATURE', params.get('MVP_NORDEA_INTENT_FI_FI_FEATURE'))
    MVP_NORDEA_INTENT_FI_FI_WORDS   = os.environ.get('MVP_NORDEA_INTENT_FI_FI_WORDS', params.get('MVP_NORDEA_INTENT_FI_FI_WORDS'))
    MVP_NORDEA_INTENT_FI_FI_LABEL   = os.environ.get('MVP_NORDEA_INTENT_FI_FI_LABEL', params.get('MVP_NORDEA_INTENT_FI_FI_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_FI_FI         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI'))
    MVP_NORDEA_INTENT_KEYWORD_FI_FI_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_FI_FI_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_FI_FI_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_FI_FI_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_SE_SE         = os.environ.get('MVP_NORDEA_INTENT_SE_SE', params.get('MVP_NORDEA_INTENT_SE_SE'))
    MVP_NORDEA_INTENT_SE_SE_FEATURE = os.environ.get('MVP_NORDEA_INTENT_SE_SE_FEATURE', params.get('MVP_NORDEA_INTENT_SE_SE_FEATURE'))
    MVP_NORDEA_INTENT_SE_SE_WORDS   = os.environ.get('MVP_NORDEA_INTENT_SE_SE_WORDS', params.get('MVP_NORDEA_INTENT_SE_SE_WORDS'))
    MVP_NORDEA_INTENT_SE_SE_LABEL   = os.environ.get('MVP_NORDEA_INTENT_SE_SE_LABEL', params.get('MVP_NORDEA_INTENT_SE_SE_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_SE_SE         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE', params.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE'))
    MVP_NORDEA_INTENT_KEYWORD_SE_SE_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_SE_SE_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_SE_SE_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_SE_SE_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_DK_DK         = os.environ.get('MVP_NORDEA_INTENT_DK_DK', params.get('MVP_NORDEA_INTENT_DK_DK'))
    MVP_NORDEA_INTENT_DK_DK_FEATURE = os.environ.get('MVP_NORDEA_INTENT_DK_DK_FEATURE', params.get('MVP_NORDEA_INTENT_DK_DK_FEATURE'))
    MVP_NORDEA_INTENT_DK_DK_WORDS   = os.environ.get('MVP_NORDEA_INTENT_DK_DK_WORDS', params.get('MVP_NORDEA_INTENT_DK_DK_WORDS'))
    MVP_NORDEA_INTENT_DK_DK_LABEL   = os.environ.get('MVP_NORDEA_INTENT_DK_DK_LABEL', params.get('MVP_NORDEA_INTENT_DK_DK_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_DK_DK         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK', params.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK'))
    MVP_NORDEA_INTENT_KEYWORD_DK_DK_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_DK_DK_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_DK_DK_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_DK_DK_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_NO_NO         = os.environ.get('MVP_NORDEA_INTENT_NO_NO', params.get('MVP_NORDEA_INTENT_NO_NO'))
    MVP_NORDEA_INTENT_NO_NO_FEATURE = os.environ.get('MVP_NORDEA_INTENT_NO_NO_FEATURE', params.get('MVP_NORDEA_INTENT_NO_NO_FEATURE'))
    MVP_NORDEA_INTENT_NO_NO_WORDS   = os.environ.get('MVP_NORDEA_INTENT_NO_NO_WORDS', params.get('MVP_NORDEA_INTENT_NO_NO_WORDS'))
    MVP_NORDEA_INTENT_NO_NO_LABEL   = os.environ.get('MVP_NORDEA_INTENT_NO_NO_LABEL', params.get('MVP_NORDEA_INTENT_NO_NO_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_NO_NO         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO', params.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO'))
    MVP_NORDEA_INTENT_KEYWORD_NO_NO_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_NO_NO_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_NO_NO_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_NO_NO_LABEL'))

   # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_BB_FI_FI         = os.environ.get('MVP_NORDEA_INTENT_BB_FI_FI', params.get('MVP_NORDEA_INTENT_BB_FI_FI'))
    MVP_NORDEA_INTENT_BB_FI_FI_FEATURE = os.environ.get('MVP_NORDEA_INTENT_BB_FI_FI_FEATURE', params.get('MVP_NORDEA_INTENT_BB_FI_FI_FEATURE'))
    MVP_NORDEA_INTENT_BB_FI_FI_WORDS   = os.environ.get('MVP_NORDEA_INTENT_BB_FI_FI_WORDS', params.get('MVP_NORDEA_INTENT_BB_FI_FI_WORDS'))
    MVP_NORDEA_INTENT_BB_FI_FI_LABEL   = os.environ.get('MVP_NORDEA_INTENT_BB_FI_FI_LABEL', params.get('MVP_NORDEA_INTENT_BB_FI_FI_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI'))
    MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_BB_SE_SE         = os.environ.get('MVP_NORDEA_INTENT_BB_SE_SE', params.get('MVP_NORDEA_INTENT_BB_SE_SE'))
    MVP_NORDEA_INTENT_BB_SE_SE_FEATURE = os.environ.get('MVP_NORDEA_INTENT_BB_SE_SE_FEATURE', params.get('MVP_NORDEA_INTENT_BB_SE_SE_FEATURE'))
    MVP_NORDEA_INTENT_BB_SE_SE_WORDS   = os.environ.get('MVP_NORDEA_INTENT_BB_SE_SE_WORDS', params.get('MVP_NORDEA_INTENT_BB_SE_SE_WORDS'))
    MVP_NORDEA_INTENT_BB_SE_SE_LABEL   = os.environ.get('MVP_NORDEA_INTENT_BB_SE_SE_LABEL', params.get('MVP_NORDEA_INTENT_BB_SE_SE_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE'))
    MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_BB_DK_DK         = os.environ.get('MVP_NORDEA_INTENT_BB_DK_DK', params.get('MVP_NORDEA_INTENT_BB_DK_DK'))
    MVP_NORDEA_INTENT_BB_DK_DK_FEATURE = os.environ.get('MVP_NORDEA_INTENT_BB_DK_DK_FEATURE', params.get('MVP_NORDEA_INTENT_BB_DK_DK_FEATURE'))
    MVP_NORDEA_INTENT_BB_DK_DK_WORDS   = os.environ.get('MVP_NORDEA_INTENT_BB_DK_DK_WORDS', params.get('MVP_NORDEA_INTENT_BB_DK_DK_WORDS'))
    MVP_NORDEA_INTENT_BB_DK_DK_LABEL   = os.environ.get('MVP_NORDEA_INTENT_BB_DK_DK_LABEL', params.get('MVP_NORDEA_INTENT_BB_DK_DK_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK'))
    MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_LABEL'))

    # This data has all the intent questions in finnish
    MVP_NORDEA_INTENT_BB_NO_NO         = os.environ.get('MVP_NORDEA_INTENT_BB_NO_NO', params.get('MVP_NORDEA_INTENT_BB_NO_NO'))
    MVP_NORDEA_INTENT_BB_NO_NO_FEATURE = os.environ.get('MVP_NORDEA_INTENT_BB_NO_NO_FEATURE', params.get('MVP_NORDEA_INTENT_BB_NO_NO_FEATURE'))
    MVP_NORDEA_INTENT_BB_NO_NO_WORDS   = os.environ.get('MVP_NORDEA_INTENT_BB_NO_NO_WORDS', params.get('MVP_NORDEA_INTENT_BB_NO_NO_WORDS'))
    MVP_NORDEA_INTENT_BB_NO_NO_LABEL   = os.environ.get('MVP_NORDEA_INTENT_BB_NO_NO_LABEL', params.get('MVP_NORDEA_INTENT_BB_NO_NO_LABEL'))

    # This is the keyword data in finnish
    MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO         = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO'))
    MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_FEATURE = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_FEATURE', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_FEATURE'))
    MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_WORDS   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_WORDS', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_WORDS'))
    MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_LABEL   = os.environ.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_LABEL', params.get('MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_LABEL'))


    # These are the samples used for training
    TRAINING_INTENT_QUESTION_FI_FI = os.environ.get('TESTING_INTENT_QUESTION_FI_FI',  params.get('TRAINING_INTENT_QUESTION_FI_FI'))
    TRAINING_INTENT_QUESTION_FI_EN = os.environ.get('TESTING_INTENT_QUESTION_FI_EN',  params.get('TRAINING_INTENT_QUESTION_FI_EN'))
    TRAINING_INTENT_QUESTION_SE_SE = os.environ.get('TESTING_INTENT_QUESTION_SE_SE',  params.get('TRAINING_INTENT_QUESTION_SE_SE'))
    TRAINING_INTENT_QUESTION_DK_DK = os.environ.get('TESTING_INTENT_QUESTION_DK_DK',  params.get('TRAINING_INTENT_QUESTION_DK_DK'))
    TRAINING_INTENT_QUESTION_NO_NO = os.environ.get('TESTING_INTENT_QUESTION_NO_NO',  params.get('TRAINING_INTENT_QUESTION_NO_NO'))

    # These are the hold out samples used for testing
    TESTING_INTENT_QUESTION_FI_FI = os.environ.get('TESTING_INTENT_QUESTION_FI_FI',  params.get('TESTING_INTENT_QUESTION_FI_FI'))
    TESTING_INTENT_QUESTION_FI_EN = os.environ.get('TESTING_INTENT_QUESTION_FI_EN',  params.get('TESTING_INTENT_QUESTION_FI_EN'))
    TESTING_INTENT_QUESTION_SE_SE = os.environ.get('TESTING_INTENT_QUESTION_SE_SE',  params.get('TESTING_INTENT_QUESTION_SE_SE'))
    TESTING_INTENT_QUESTION_DK_DK = os.environ.get('TESTING_INTENT_QUESTION_DK_DK',  params.get('TESTING_INTENT_QUESTION_DK_DK'))
    TESTING_INTENT_QUESTION_NO_NO = os.environ.get('TESTING_INTENT_QUESTION_NO_NO',  params.get('TESTING_INTENT_QUESTION_NO_NO'))

    # These are the samples used for training
    TRAINING_INTENT_QUESTION_BB_FI_FI = os.environ.get('TESTING_INTENT_QUESTION_BB_FI_FI',  params.get('TRAINING_INTENT_QUESTION_BB_FI_FI'))
    TRAINING_INTENT_QUESTION_BB_SE_SE = os.environ.get('TESTING_INTENT_QUESTION_BB_SE_SE',  params.get('TRAINING_INTENT_QUESTION_BB_SE_SE'))
    TRAINING_INTENT_QUESTION_BB_DK_DK = os.environ.get('TESTING_INTENT_QUESTION_BB_DK_DK',  params.get('TRAINING_INTENT_QUESTION_BB_DK_DK'))
    TRAINING_INTENT_QUESTION_BB_NO_NO = os.environ.get('TESTING_INTENT_QUESTION_BB_NO_NO',  params.get('TRAINING_INTENT_QUESTION_BB_NO_NO'))

    # These are the hold out samples used for testing
    TESTING_INTENT_QUESTION_BB_FI_FI = os.environ.get('TESTING_INTENT_QUESTION_BB_FI_FI',  params.get('TESTING_INTENT_QUESTION_BB_FI_FI'))
    TESTING_INTENT_QUESTION_BB_SE_SE = os.environ.get('TESTING_INTENT_QUESTION_BB_SE_SE',  params.get('TESTING_INTENT_QUESTION_BB_SE_SE'))
    TESTING_INTENT_QUESTION_BB_DK_DK = os.environ.get('TESTING_INTENT_QUESTION_BB_DK_DK',  params.get('TESTING_INTENT_QUESTION_BB_DK_DK'))
    TESTING_INTENT_QUESTION_BB_NO_NO = os.environ.get('TESTING_INTENT_QUESTION_BB_NO_NO',  params.get('TESTING_INTENT_QUESTION_BB_NO_NO'))

    SYNONYMS_FI = os.environ.get('SYNONYMS_FI',  params.get('SYNONYMS_FI'))
    SYNONYMS_EN = os.environ.get('SYNONYMS_EN',  params.get('SYNONYMS_EN'))
    SYNONYMS_SE = os.environ.get('SYNONYMS_SE',  params.get('SYNONYMS_SE'))
    SYNONYMS_DK = os.environ.get('SYNONYMS_DK',  params.get('SYNONYMS_DK'))
    SYNONYMS_NO = os.environ.get('SYNONYMS_NO',  params.get('SYNONYMS_NO'))

    # This is separate validation data set in finnish
    MVP_VALIDATION_QUESTIONS_FIN = os.environ.get('MVP_VALIDATION_QUESTIONS_FIN', params.get('MVP_VALIDATION_QUESTIONS_FIN'))

    # PRETRAINED EMBEDDING
    PRETRAIN_VEC_ENGLISH = os.environ.get('PRETRAIN_VEC_ENGLISH',  params.get('PRETRAIN_VEC_ENGLISH'))
    PRETRAIN_VEC_FINNISH = os.environ.get('PRETRAIN_VEC_FINNISH',  params.get('PRETRAIN_VEC_FINNISH'))
    # GREETINGS
    FI_GREETINGS_LIST = os.environ.get('FI_GREETINGS_LIST', params.get('FI_GREETINGS_LIST'))
    EN_GREETINGS_LIST = os.environ.get('EN_GREETINGS_LIST', params.get('EN_GREETINGS_LIST'))

    MAX_QUESTION_LENGTH = os.environ.get('MAX_QUESTION_LENGTH', params.get('MAX_QUESTION_LENGTH'))
    MEMORY_SIZE = os.environ.get('MEMORY_SIZE', params.get('MEMORY_SIZE'))

    return {
        # IP
        'AI_SERVER_URL':        AI_SERVER_URL,
        'SENTIMENT_SERVER_URL': SENTIMENT_SERVER_URL,
        'DIALOGUE_SERVER_URL':  DIALOGUE_SERVER_URL,
        'NLP_SERVER_URL':       NLP_SERVER_URL,
        'EMBEDDING_SERVER_URL': EMBEDDING_SERVER_URL,
        'RETRIEVAL_SERVER_URL': RETRIEVAL_SERVER_URL,
        'INTENT_SERVER_URL': INTENT_SERVER_URL,
        'ACTION_SERVER_URL': ACTION_SERVER_URL,
        'REDIS_SERVER_IP': REDIS_SERVER_IP,

        # BOTSERVER
        'BOTSERVER_BAF_FILE':               BOTSERVER_BAF_FILE,
        'BOTSERVER_NORDIC_CITY':            BOTSERVER_NORDIC_CITY,
        'BOTSERVER_CURRENTY':               BOTSERVER_CURRENTY,
        'BOTSERVER_INTENT_THRESHOLD':       float(BOTSERVER_INTENT_THRESHOLD),
        'BOTSERVER_ALTERNATIVES_THRESHOLD': float(BOTSERVER_ALTERNATIVES_THRESHOLD),
        'BOTSERVER_RETRIEVAL_THRESHOLD':    float(BOTSERVER_RETRIEVAL_THRESHOLD),
        'BOTSERVER_CLEANSING_INTERVAL_SEC': int(BOTSERVER_CLEANSING_INTERVAL_SEC),
        'BOTSERVER_DEFAUTL_CHANNEL':        BOTSERVER_DEFAUTL_CHANNEL,
        'BOTSERVER_LANGUAGES':              BOTSERVER_LANGUAGES,
        'BOTSERVER_LANGUAGE_MAPPINGS':      BOTSERVER_LANGUAGE_MAPPINGS,
        'RELA_PATH':                        RELA_PATH,
        'BOTSERVER_CLIENT_CONNECT_TIMEOUT': int(BOTSERVER_CLIENT_CONNECT_TIMEOUT),
        'BOTSERVER_CLIENT_READ_TIMEOUT':    int(BOTSERVER_CLIENT_READ_TIMEOUT),
        'BOTSERVER_ORIGINATOR_CHANNEL_MAPPINGS': BOTSERVER_ORIGINATOR_CHANNEL_MAPPINGS,

        # NER
        'NER_NORDEA_NAMES': NER_NORDEA_NAMES,
        'NER_MODEL_DIR':    NER_MODEL_DIR,
        'NER_MASKING_DIR':  NER_MASKING_DIR,

        # SENTIMENT
        'SENTIMENT_DATA_POS_ENG': SENTIMENT_DATA_POS_ENG,
        'SENTIMENT_DATA_NEG_ENG': SENTIMENT_DATA_NEG_ENG,
        'SENTIMENT_DATA_POS_FIN': SENTIMENT_DATA_POS_FIN,
        'SENTIMENT_DATA_NEG_FIN': SENTIMENT_DATA_NEG_FIN,
        'SENTIMENT_EMBEDDING_DIM':   int(SENTIMENT_EMBEDDING_DIM),
        'SENTIMENT_NUM_FILTERS':     int(SENTIMENT_NUM_FILTERS),
        'SENTIMENT_FILTER_SIZES':    SENTIMENT_FILTER_SIZES,
        'SENTIMENT_CHECKPOINT_FILE': SENTIMENT_CHECKPOINT_FILE,
        'SENTIMENT_RUN_NAME':        SENTIMENT_RUN_NAME,
        'SENTIMENT_RUN_NAME_FIN':    SENTIMENT_RUN_NAME_FIN,

        # INTENT
        'INTENT_ITERATION':        int(INTENT_ITERATION),
        'INTENT_EVALUATION_EVERY': int(INTENT_EVALUATION_EVERY),
        'INTENT_CHECKPOINT_EVERY': int(INTENT_CHECKPOINT_EVERY),
        'INTENT_EMBEDDING_DIM':    int(INTENT_EMBEDDING_DIM),
        'INTENT_NUM_FILTERS':      int(INTENT_NUM_FILTERS),
        'INTENT_FILTER_SIZES':     INTENT_FILTER_SIZES,
        'INTENT_CHECKPOINT_FILE':  INTENT_CHECKPOINT_FILE,
        'INTENT_RUN_NAME_FI_EN':   INTENT_RUN_NAME_FI_EN,
        'INTENT_RUN_NAME_FI_FI':   INTENT_RUN_NAME_FI_FI,
        'INTENT_RUN_NAME_SE_SE':   INTENT_RUN_NAME_SE_SE,
        'INTENT_RUN_NAME_DK_DK':   INTENT_RUN_NAME_DK_DK,
        'INTENT_RUN_NAME_NO_NO':   INTENT_RUN_NAME_NO_NO,
        'INTENT_RUN_NAME_BB_FI_FI': INTENT_RUN_NAME_BB_FI_FI,
        'INTENT_RUN_NAME_BB_SE_SE': INTENT_RUN_NAME_BB_SE_SE,
        'INTENT_RUN_NAME_BB_DK_DK': INTENT_RUN_NAME_BB_DK_DK,
        'INTENT_RUN_NAME_BB_NO_NO': INTENT_RUN_NAME_BB_NO_NO,

        # TT
        'REDIS_BACKEND_URL':           REDIS_BACKEND_URL,
        'TA_REDIS_BACKEND_URL':        TA_REDIS_BACKEND_URL,
        'TT_BACKEND_URL':              TT_BACKEND_URL,
        'UPDATE_BOT_SERVER_URL':       UPDATE_BOT_SERVER_URL,
        'UPDATE_INTENT_SERVER_URL':    UPDATE_INTENT_SERVER_URL,
        'UPDATE_RETRIEVAL_SERVER_URL': UPDATE_RETRIEVAL_SERVER_URL,
        'VCA_PROD_SERVER_URL':         VCA_PROD_SERVER_URL,
        'VCA_DEMO_SERVER_URL':         VCA_DEMO_SERVER_URL,
        'VCA_SERVER_USER':             VCA_SERVER_USER,
        'VCA_SERVER_PASS':             VCA_SERVER_PASS,
        'JOURNEY_UPLOAD_URL_SUFFIX':   JOURNEY_UPLOAD_URL_SUFFIX,
        'INTENT_UPDATE_URL_SUFFIX':    INTENT_UPDATE_URL_SUFFIX,
        'INTENT_RELOAD_URL_SUFFIX':    INTENT_RELOAD_URL_SUFFIX,
        'FILE_UPLOAD_URL_SUFFIX':      FILE_UPLOAD_URL_SUFFIX,
        'RETRIEVAL_RELOAD_URL_SUFFIX': RETRIEVAL_RELOAD_URL_SUFFIX,
        'WRAPPER_RELOAD_URL_SUFFIX':   WRAPPER_RELOAD_URL_SUFFIX,
        'KEYWORD_MATCH_URL_SUFFIX':    KEYWORD_MATCH_URL_SUFFIX,

        # ACTION
        'ACTION_AUTHENTICATION_SERVICE':    ACTION_AUTHENTICATION_SERVICE,
        'ACTION_AUTH_REFRESH_SERVICE' :     ACTION_AUTH_REFRESH_SERVICE,
        'ACTION_MOCK_AUTHENTICATION_SERVICE': ACTION_MOCK_AUTHENTICATION_SERVICE,
        'ACTION_PAYMENT_SERVICE':           ACTION_PAYMENT_SERVICE,
        'ACTION_ACCOUNT_SERVICE':           ACTION_ACCOUNT_SERVICE,
        'ACTION_MEETING_SERVICE':           ACTION_MEETING_SERVICE,
        'ACTION_CARD_SERVICE':              ACTION_CARD_SERVICE,
        'ACTION_CUSTOMER_INFO_SERVICE':     ACTION_CUSTOMER_INFO_SERVICE,
        'ACTION_CLIENT_ID' :                ACTION_CLIENT_ID,
        'ACTION_SUBJECT_TOKEN_LIFETIME' :   int(ACTION_SUBJECT_TOKEN_LIFETIME),
        'ACTION_MEMORY_CLEAN_INTERVAL' :    int(ACTION_MEMORY_CLEAN_INTERVAL),
        'ACTION_SERVER_CERTIFICATE_PATH':   ACTION_SERVER_CERTIFICATE_PATH,
        'ACTION_SERVER_KAFKA_CERT_PATH':    ACTION_SERVER_KAFKA_CERT_PATH,
        'ACTION_SERVER_KAFKA_KEY_PATH':     ACTION_SERVER_KAFKA_KEY_PATH,
        'ACTION_SERVER_COMMUNICATIONS_LAYER_BASE_URL': ACTION_SERVER_COMMUNICATIONS_LAYER_BASE_URL,
        'ACTION_SERVER_COMMUNICATIONS_LAYER_TOPIC': ACTION_SERVER_COMMUNICATIONS_LAYER_TOPIC,
        'ACTION_SERVER_KAFKA_CERTS':        ACTION_SERVER_KAFKA_CERTS,
        'ACTION_NDF_ENVIRONMENT':           ACTION_NDF_ENVIRONMENT,
        'ACTION_SERVER_CONNECT_TIMEOUT':    float(ACTION_SERVER_CONNECT_TIMEOUT),
        'ACTION_SERVER_READ_TIMEOUT':       float(ACTION_SERVER_READ_TIMEOUT),
        'ACTION_TOKEN_EXPIRES_AT_REDUCTION': int(ACTION_TOKEN_EXPIRES_AT_REDUCTION),
        'OPERATION_SERVICE_USER':           OPERATION_SERVICE_USER,
        'OPERATION_SERVICE_PASSWORD':       OPERATION_SERVICE_PASSWORD,
        'OPERATION_REMOTE_NAME':            OPERATION_REMOTE_NAME,
        'OPERATION_SAMBA_IP':               OPERATION_SAMBA_IP,
        'OPERATION_SAMBA_PORT':             OPERATION_SAMBA_PORT,
        'OPERATION_SAMBA_SHARE':            OPERATION_SAMBA_SHARE,
        'ARCHIVE_DIR':                      ARCHIVE_DIR,
        'ARCHIVE_LIFETIME_DAYS':            int(ARCHIVE_LIFETIME_DAYS),
        'MYSQL_HOST_URL':                   MYSQL_HOST_URL,

        # NLG
        'NLG_VOCAB_SIZE':      int(NLG_VOCAB_SIZE),
        'NLG_NUM_LAYERS':      int(NLG_NUM_LAYERS),
        'NLG_SIZE':            int(NLG_SIZE),
        'NLG_DATA_DIR':        NLG_DATA_DIR,
        'NLG_TRAIN_DIR':       NLG_TRAIN_DIR,
        'NLG_FROM_TRAIN_DATA': NLG_FROM_TRAIN_DATA,
        'NLG_TO_TRAIN_DATA':   NLG_TO_TRAIN_DATA,
        'NLG_FROM_DEV_DATA':   NLG_FROM_DEV_DATA,
        'NLG_TO_DEV_DATA':     NLG_TO_DEV_DATA,

        'EMBEDDING_FEATURE_SIZE':int(EMBEDDING_FEATURE_SIZE),
        'EMBEDDING_WORD_SIZE': int(EMBEDDING_WORD_SIZE),
        'NLP_VOCAB_SIZE': int(NLP_VOCAB_SIZE),
        'NLP_FREQUENT_VOCAB_SIZE': int(NLP_FREQUENT_VOCAB_SIZE),
        'FREQUENT_VOCAB_ENGLISH': FREQUENT_VOCAB_ENGLISH,
        'FREQUENT_VOCAB_FINNISH': FREQUENT_VOCAB_FINNISH,
        'FREQUENT_VOCAB_SWEDISH': FREQUENT_VOCAB_SWEDISH,
        'FREQUENT_VOCAB_NORWEGIAN': FREQUENT_VOCAB_NORWEGIAN,
        'FREQUENT_VOCAB_DANISH': FREQUENT_VOCAB_DANISH,
        'LANGUAGE_DETECTION_TEST_QUESTIONS': LANGUAGE_DETECTION_TEST_QUESTIONS,

        'REDIS_SERVER_MASTER_1_URL': REDIS_SERVER_MASTER_1_URL,
        'REDIS_SERVER_MASTER_2_URL': REDIS_SERVER_MASTER_2_URL,
        'REDIS_SERVER_MASTER_3_URL': REDIS_SERVER_MASTER_3_URL,

        'VCA_DIR': VCA_DIR,
        'DATA_DIR': DATA_DIR,
        'NORDEA_PROCESS_ENGLISH': NORDEA_PROCESS_ENGLISH,
        'NORDEA_PROCESS_ENGLISH_FEATURE': NORDEA_PROCESS_ENGLISH_FEATURE,
        'NORDEA_PROCESS_ENGLISH_WORDS': NORDEA_PROCESS_ENGLISH_WORDS,
        'NORDEA_FAQ_ENGLISH': NORDEA_FAQ_ENGLISH,
        'NORDEA_FAQ_ENGLISH_FEATURE': NORDEA_FAQ_ENGLISH_FEATURE,
        'NORDEA_FAQ_ENGLISH_WORDS': NORDEA_FAQ_ENGLISH_WORDS,
        'MVP_NORDEA_INTENT_FI_EN': MVP_NORDEA_INTENT_FI_EN,
        'MVP_NORDEA_INTENT_FI_EN_FEATURE': MVP_NORDEA_INTENT_FI_EN_FEATURE,
        'MVP_NORDEA_INTENT_FI_EN_WORDS': MVP_NORDEA_INTENT_FI_EN_WORDS,
        'MVP_NORDEA_INTENT_FI_EN_LABEL': MVP_NORDEA_INTENT_FI_EN_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_FI_EN': MVP_NORDEA_INTENT_KEYWORD_FI_EN,
        'MVP_NORDEA_INTENT_KEYWORD_FI_EN_FEATURE': MVP_NORDEA_INTENT_KEYWORD_FI_EN_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_FI_EN_WORDS': MVP_NORDEA_INTENT_KEYWORD_FI_EN_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_FI_EN_LABEL': MVP_NORDEA_INTENT_KEYWORD_FI_EN_LABEL,
        'NORDEA_PROCESS_FINNISH': NORDEA_PROCESS_FINNISH,
        'NORDEA_PROCESS_FINNISH_FEATURE': NORDEA_PROCESS_FINNISH_FEATURE,
        'NORDEA_PROCESS_FINNISH_WORDS': NORDEA_PROCESS_FINNISH_WORDS,
        'NORDEA_FAQ_FINNISH': NORDEA_FAQ_FINNISH,
        'NORDEA_FAQ_FINNISH_FEATURE': NORDEA_FAQ_FINNISH_FEATURE,
        'NORDEA_FAQ_FINNISH_WORDS': NORDEA_FAQ_FINNISH_WORDS,

        'MVP_NORDEA_INTENT_FI_FI': MVP_NORDEA_INTENT_FI_FI,
        'MVP_NORDEA_INTENT_FI_FI_FEATURE': MVP_NORDEA_INTENT_FI_FI_FEATURE,
        'MVP_NORDEA_INTENT_FI_FI_WORDS': MVP_NORDEA_INTENT_FI_FI_WORDS,
        'MVP_NORDEA_INTENT_FI_FI_LABEL': MVP_NORDEA_INTENT_FI_FI_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_FI_FI': MVP_NORDEA_INTENT_KEYWORD_FI_FI,
        'MVP_NORDEA_INTENT_KEYWORD_FI_FI_FEATURE': MVP_NORDEA_INTENT_KEYWORD_FI_FI_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_FI_FI_WORDS': MVP_NORDEA_INTENT_KEYWORD_FI_FI_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_FI_FI_LABEL': MVP_NORDEA_INTENT_KEYWORD_FI_FI_LABEL,
        'MVP_VALIDATION_QUESTIONS_FIN': MVP_VALIDATION_QUESTIONS_FIN,


        'MVP_NORDEA_INTENT_SE_SE': MVP_NORDEA_INTENT_SE_SE,
        'MVP_NORDEA_INTENT_SE_SE_FEATURE': MVP_NORDEA_INTENT_SE_SE_FEATURE,
        'MVP_NORDEA_INTENT_SE_SE_WORDS': MVP_NORDEA_INTENT_SE_SE_WORDS,
        'MVP_NORDEA_INTENT_SE_SE_LABEL': MVP_NORDEA_INTENT_SE_SE_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_SE_SE': MVP_NORDEA_INTENT_KEYWORD_SE_SE,
        'MVP_NORDEA_INTENT_KEYWORD_SE_SE_FEATURE': MVP_NORDEA_INTENT_KEYWORD_SE_SE_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_SE_SE_WORDS': MVP_NORDEA_INTENT_KEYWORD_SE_SE_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_SE_SE_LABEL': MVP_NORDEA_INTENT_KEYWORD_SE_SE_LABEL,

        'MVP_NORDEA_INTENT_DK_DK': MVP_NORDEA_INTENT_DK_DK,
        'MVP_NORDEA_INTENT_DK_DK_FEATURE': MVP_NORDEA_INTENT_DK_DK_FEATURE,
        'MVP_NORDEA_INTENT_DK_DK_WORDS': MVP_NORDEA_INTENT_DK_DK_WORDS,
        'MVP_NORDEA_INTENT_DK_DK_LABEL': MVP_NORDEA_INTENT_DK_DK_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_DK_DK': MVP_NORDEA_INTENT_KEYWORD_DK_DK,
        'MVP_NORDEA_INTENT_KEYWORD_DK_DK_FEATURE': MVP_NORDEA_INTENT_KEYWORD_DK_DK_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_DK_DK_WORDS': MVP_NORDEA_INTENT_KEYWORD_DK_DK_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_DK_DK_LABEL': MVP_NORDEA_INTENT_KEYWORD_DK_DK_LABEL,

        'MVP_NORDEA_INTENT_NO_NO': MVP_NORDEA_INTENT_NO_NO,
        'MVP_NORDEA_INTENT_NO_NO_FEATURE': MVP_NORDEA_INTENT_NO_NO_FEATURE,
        'MVP_NORDEA_INTENT_NO_NO_WORDS': MVP_NORDEA_INTENT_NO_NO_WORDS,
        'MVP_NORDEA_INTENT_NO_NO_LABEL': MVP_NORDEA_INTENT_NO_NO_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_NO_NO': MVP_NORDEA_INTENT_KEYWORD_NO_NO,
        'MVP_NORDEA_INTENT_KEYWORD_NO_NO_FEATURE': MVP_NORDEA_INTENT_KEYWORD_NO_NO_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_NO_NO_WORDS': MVP_NORDEA_INTENT_KEYWORD_NO_NO_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_NO_NO_LABEL': MVP_NORDEA_INTENT_KEYWORD_NO_NO_LABEL,

        'MVP_NORDEA_INTENT_BB_FI_FI': MVP_NORDEA_INTENT_BB_FI_FI,
        'MVP_NORDEA_INTENT_BB_FI_FI_FEATURE': MVP_NORDEA_INTENT_BB_FI_FI_FEATURE,
        'MVP_NORDEA_INTENT_BB_FI_FI_WORDS': MVP_NORDEA_INTENT_BB_FI_FI_WORDS,
        'MVP_NORDEA_INTENT_BB_FI_FI_LABEL': MVP_NORDEA_INTENT_BB_FI_FI_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI': MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI,
        'MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_FEATURE': MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_WORDS': MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_LABEL': MVP_NORDEA_INTENT_KEYWORD_BB_FI_FI_LABEL,
        'MVP_VALIDATION_QUESTIONS_FIN': MVP_VALIDATION_QUESTIONS_FIN,


        'MVP_NORDEA_INTENT_BB_SE_SE': MVP_NORDEA_INTENT_BB_SE_SE,
        'MVP_NORDEA_INTENT_BB_SE_SE_FEATURE': MVP_NORDEA_INTENT_BB_SE_SE_FEATURE,
        'MVP_NORDEA_INTENT_BB_SE_SE_WORDS': MVP_NORDEA_INTENT_BB_SE_SE_WORDS,
        'MVP_NORDEA_INTENT_BB_SE_SE_LABEL': MVP_NORDEA_INTENT_BB_SE_SE_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE': MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE,
        'MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_FEATURE': MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_WORDS': MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_LABEL': MVP_NORDEA_INTENT_KEYWORD_BB_SE_SE_LABEL,

        'MVP_NORDEA_INTENT_BB_DK_DK': MVP_NORDEA_INTENT_BB_DK_DK,
        'MVP_NORDEA_INTENT_BB_DK_DK_FEATURE': MVP_NORDEA_INTENT_BB_DK_DK_FEATURE,
        'MVP_NORDEA_INTENT_BB_DK_DK_WORDS': MVP_NORDEA_INTENT_BB_DK_DK_WORDS,
        'MVP_NORDEA_INTENT_BB_DK_DK_LABEL': MVP_NORDEA_INTENT_BB_DK_DK_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK': MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK,
        'MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_FEATURE': MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_WORDS': MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_LABEL': MVP_NORDEA_INTENT_KEYWORD_BB_DK_DK_LABEL,

        'MVP_NORDEA_INTENT_BB_NO_NO': MVP_NORDEA_INTENT_BB_NO_NO,
        'MVP_NORDEA_INTENT_BB_NO_NO_FEATURE': MVP_NORDEA_INTENT_BB_NO_NO_FEATURE,
        'MVP_NORDEA_INTENT_BB_NO_NO_WORDS': MVP_NORDEA_INTENT_BB_NO_NO_WORDS,
        'MVP_NORDEA_INTENT_BB_NO_NO_LABEL': MVP_NORDEA_INTENT_BB_NO_NO_LABEL,
        'MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO': MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO,
        'MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_FEATURE': MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_FEATURE,
        'MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_WORDS': MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_WORDS,
        'MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_LABEL': MVP_NORDEA_INTENT_KEYWORD_BB_NO_NO_LABEL,

        'TRAINING_INTENT_QUESTION_FI_EN': TRAINING_INTENT_QUESTION_FI_EN,
        'TRAINING_INTENT_QUESTION_FI_FI': TRAINING_INTENT_QUESTION_FI_FI,
        'TRAINING_INTENT_QUESTION_SE_SE': TRAINING_INTENT_QUESTION_SE_SE,
        'TRAINING_INTENT_QUESTION_DK_DK': TRAINING_INTENT_QUESTION_DK_DK,
        'TRAINING_INTENT_QUESTION_NO_NO': TRAINING_INTENT_QUESTION_NO_NO,

        'TESTING_INTENT_QUESTION_FI_EN': TESTING_INTENT_QUESTION_FI_EN,
        'TESTING_INTENT_QUESTION_FI_FI': TESTING_INTENT_QUESTION_FI_FI,
        'TESTING_INTENT_QUESTION_SE_SE': TESTING_INTENT_QUESTION_SE_SE,
        'TESTING_INTENT_QUESTION_DK_DK': TESTING_INTENT_QUESTION_DK_DK,
        'TESTING_INTENT_QUESTION_NO_NO': TESTING_INTENT_QUESTION_NO_NO,

        'TRAINING_INTENT_QUESTION_BB_FI_FI': TRAINING_INTENT_QUESTION_BB_FI_FI,
        'TRAINING_INTENT_QUESTION_BB_SE_SE': TRAINING_INTENT_QUESTION_BB_SE_SE,
        'TRAINING_INTENT_QUESTION_BB_DK_DK': TRAINING_INTENT_QUESTION_BB_DK_DK,
        'TRAINING_INTENT_QUESTION_BB_NO_NO': TRAINING_INTENT_QUESTION_BB_NO_NO,

        'TESTING_INTENT_QUESTION_BB_FI_FI': TESTING_INTENT_QUESTION_BB_FI_FI,
        'TESTING_INTENT_QUESTION_BB_SE_SE': TESTING_INTENT_QUESTION_BB_SE_SE,
        'TESTING_INTENT_QUESTION_BB_DK_DK': TESTING_INTENT_QUESTION_BB_DK_DK,
        'TESTING_INTENT_QUESTION_BB_NO_NO': TESTING_INTENT_QUESTION_BB_NO_NO,

        'SYNONYMS_EN': SYNONYMS_EN,
        'SYNONYMS_FI': SYNONYMS_FI,
        'SYNONYMS_SE': SYNONYMS_SE,
        'SYNONYMS_DK': SYNONYMS_DK,
        'SYNONYMS_NO': SYNONYMS_NO,


        'PRETRAIN_VEC_ENGLISH': PRETRAIN_VEC_ENGLISH,
        'PRETRAIN_VEC_FINNISH': PRETRAIN_VEC_FINNISH,


        'FI_GREETINGS_LIST': FI_GREETINGS_LIST,
        'EN_GREETINGS_LIST': EN_GREETINGS_LIST,
        'MAX_QUESTION_LENGTH': int(MAX_QUESTION_LENGTH),
        'MEMORY_SIZE': int(MEMORY_SIZE),
    }
